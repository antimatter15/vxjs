#summary The vX Core Package

= Introduction =
The vX core package provides a basic toolkit for Web scripting with an emphasis on size and speed. The whole of vX, including subordinate packages, resides within the `_` (underscore) namespace.
A file containing the full package is available at http://vxjs.googlecode.com/svn/trunk/lib/vx.all.js
The online build system at http://vxjs.googlecode.com/svn/trunk/build.htm can be used to generate subset packages.

== AJAX: AJAX Query ==
AJAX is a staple of the "Web 2.0" world. vX provides an extremely lightweight module to perform simple asynchronous GET/POST requests.
=== Usage ===
`_.X(url,callback[,query]);`
  * url: the URL to query
  * callback: function that is called when the query returns
  * query: query string, sets POST mode when specified
=== Example ===
{{{
// perform a GET request
_.X("ajax.php?you=suck&howmuch=alot",function(response){alert(response);})

// perform a POST request
_.X("ajax.php",function(response){alert(response)},"you=suck&howmuch=alot")
}}}

== Query Encode: Query Encoding ==
The query encoder builds an HTTP query string out of a Javascript object; this simple serialization scheme prepares data for sending to the server.
=== Usage ===
`_.Q(obj);`
  * obj: object to be encoded
  * _query-encoding is not recursive and does not escape data_
=== Example ===
{{{
_.Q({you: "suck", howmuch: "alot"})
//"you=suck&howmuch=alot"
}}}

== Stringify: JSON Encoding ==
The JSON encoder serializes complex objects into JSON strings suitable for AJAX queries and unserializes JSON strings into objects.
=== Usage ===
`_.S(data[,decode=false]);`
  * data: the object to be serialized or, in the case of decoding, the string to be unserialized
  * decode: true to unserialize the first argument, otherwise to serialize
=== Example ===
{{{
// serialize an object
_.S({hello: "world!", recurse: {awesome: "true", undef: undefined, notfalse: true}})
//"{hello:'world!',recurse:{awesome:'true',undef:undefined,notfalse:true}}"

// unserialize a string
_.S("{hello:'world!',recurse:{awesome:'true',undef:undefined,notfalse:true}}",true)
//{hello:'world!',recurse:{awesome:'true',undef:undefined,notfalse:true}}
}}}

== HTML Entity: HTML Entity Encoding ==
When dealing with HTML and XML, it is often necessary to convert troublesome characters into entities. The HTML entity encoder escapes and unescapes strings.
=== Usage ===
`_.H(str[,unesc=false]);`
  * str: the string to be escaped or unescaped
  * unesc: true to unescape the first argument, otherwise to escape
  * _the encoder does not escape ampersands in entities, i.e. &amp; to &amp;amp;_
=== Example ===
{{{
// escape a string
_.H('ham & eggs')
//"ham &amp; eggs"

// unescape a string
_.H('ham &amp; eggs',true)
//"ham & eggs"
}}}

== Clone: Object Copying and Cloning ==
A _copy_ of an object is an _independent replica_ of the original. A _clone_ of an object is a "subclass" that _overrides_ the original. The difference between a copy and a clone is that when an object is modified, its copies are unaffected while its clones inherit the changes.
=== Usage ===
`_.C(obj[,copy=false]);`
  * obj: the object to be cloned or copied
  * copy: true to copy the first argument, otherwise to clone
=== Example ===
{{{
// set up the original object
var original = {a: 1, b: 2, c: 3}
// create a clone and override a property
var clone = _.C(original)
clone.b = 4
// create a copy and modify a property
var copy = _.C(original,true)
copy.b = 4

// modify the original object
original.b = 5
original.c = 6
original.d = 7
// copy is {a: 1, b: 4, c: 3}
// clone is {a: 1, b: 4, c: 6, d: 7}
}}}