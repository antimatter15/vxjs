#summary The vX Core Package

= Introduction =
The vX core package provides a basic toolkit for Web scripting with an emphasis on size and speed. The whole of vX, including subordinate packages, resides within the `_` (underscore) namespace.
A file containing the full package is available at http://vxjs.googlecode.com/svn/trunk/lib/vx.all.js
The online build system at http://vxjs.googlecode.com/svn/trunk/build.htm can be used to generate subset packages.

== Add Class: Add Class ==

=== Usage ===
`_.AC(element, classname);`
  * classname: the class you want to add
  * element: the node add to
=== Example ===


== Ajax: AJAX Query ==
AJAX is a staple of the "Web 2.0" world. vX provides an extremely lightweight module to perform simple asynchronous GET/POST requests.
=== Usage ===
`_.X(url,callback[,query]);`
  * url: the URL to query
  * callback: function that is called when the query returns
  * query: query string, sets POST mode when specified
=== Example ===
{{{
// perform a GET request
_.X("ajax.php?you=suck&howmuch=alot",function(response){alert(response);})

// perform a POST request
_.X("ajax.php",function(response){alert(response)},"you=suck&howmuch=alot")
}}}

== Animation: Basic Animation ==

=== Usage ===

=== Example ===


== Array: Convert iterables to real arrays ==
Accepts an array-like collection and returns an array equivalent
=== Usage ===
`_.Y(collection);`
  * collection: anything with numberical iterators
=== Example ===
{{{
// a bunch of dom nodes
var original = document.body.childNodes
// create a clone and override a property
var array = _.Y(original)
// array functions like splice, etc. 
array.splice(1,1); //get rid of first object
}}}

== Get By Class: Get By Class Name ==

=== Usage ===
`_.L(classname[,node=document]);`
  * classname: the class you want to search for
  * node: the node to search in, by default, the document
=== Example ===


== Clone: Object Copying and Cloning ==
A _copy_ of an object is an _independent replica_ of the original. A _clone_ of an object is a "subclass" that _overrides_ the original. The difference between a copy and a clone is that when an object is modified, its copies are unaffected while its clones inherit the changes.
=== Usage ===
`_.C(obj[,copy=false]);`
  * obj: the object to be cloned or copied
  * copy: true to copy the first argument, otherwise to clone
=== Example ===
{{{
// set up the original object
var original = {a: 1, b: 2, c: 3}
// create a clone and override a property
var clone = _.C(original)
clone.b = 4
// create a copy and modify a property
var copy = _.C(original,true)
copy.b = 4

// modify the original object
original.b = 5
original.c = 6
original.d = 7
// copy is {a: 1, b: 4, c: 3}
// clone is {a: 1, b: 4, c: 6, d: 7}
}}}

== Events: Event Handling ==

=== Usage ===

=== Example ===


== Extend Object: Object Merging ==

=== Usage ===

=== Example ===


== Fade: Simple Fade Animation ==
Fading is probably the most common and most useful effect. It makes sense most people don't like the complexity of the Core Animation function, and want a simpler function.
=== Usage ===
`_.F(DIRECTION IN/OUT, HTML ELEMENT[, FRAMES, INTERVAL]);`

  * Direction is lowercase, either "in" or "out"
  * Frames/interval are optional
  * Frames is number of frames in animation
  * Interval is the frame delay
=== Example ===
{{{
_.F("out",document.body)
}}}

== Get Element: Get Element By ID ==

=== Usage ===

=== Example ===


== Has Class: Has Class ==

=== Usage ===
`_.HC(element, classname);`
  * classname: the class you want to search for
  * element: the node check for
=== Example ===


== HTML Entity: HTML Entity Encoding ==
When dealing with HTML and XML, it is often necessary to convert troublesome characters into entities. The HTML entity encoder escapes and unescapes strings.
=== Usage ===
`_.H(str[,unesc=false]);`
  * str: the string to be escaped or unescaped
  * unesc: true to unescape the first argument, otherwise to escape
  * _the encoder does not escape ampersands in entities, i.e. &amp; to &amp;amp;_
=== Example ===
{{{
// escape a string
_.H('ham & eggs')
//"ham &amp; eggs"

// unescape a string
_.H('ham &amp; eggs',true)
//"ham & eggs"
}}}

== Index: Array IndexOf ==

=== Usage ===
`_.I(obj, array);`
  * obj: object to search for
  * array: the array to search in
  * Note that it only gets the first occurance and ignores the following
=== Example ===
{{{
_.I("ham", ["bacon", "trees", "cows", "nuclear-pests"]);
//-1
var breakfast = ["bacon", "ham", "eggs", "javascript"]
_.I("ham", breakfast);
//1
}}}

== Namespacing: Namespace Generation ==

=== Usage ===

=== Example ===


== Query Encode: Query Encoding ==
The query encoder builds an HTTP query string out of a Javascript object; this simple serialization scheme prepares data for sending to the server.
=== Usage ===
`_.Q(obj);`
  * obj: object to be encoded
  * _query-encoding is not recursive and does not escape data_
=== Example ===
{{{
_.Q({you: "suck", howmuch: "alot"})
//"you=suck&howmuch=alot"
}}}

== Queue: Queue ==

=== Usage ===

=== Example ===
_.U(["_.F('in',document.body,0,0,f)","_.F('out',document.body,0,0,f)"])

== Ready: Document onReady ==
Many people use Window.onLoad to execute their scripts after the page has loaded. But, there is only 1 window.onload function you can set, and it happens after the images and etc are loaded. Document onReady allows you to execute javascript immediately when the document is ready for manipulation, before images are loaded and you can use it with multiple functions.
=== Usage ===
`_.R(function);`
  * function: A javascript function to execute after the DOM is ready for manipulation
=== Example ===
{{{
_.R(function(){
  alert("this will execute before the page is fully loaded, but after DOM can be manipulated");
  //manipulate DOM
})
}}}

== Stringify: JSON Encoding ==
The JSON encoder serializes complex objects into JSON strings suitable for AJAX queries and unserializes JSON strings into objects.
=== Usage ===
`_.S(data[,decode=false]);`
  * data: the object to be serialized or, in the case of decoding, the string to be unserialized
  * decode: true to unserialize the first argument, otherwise to serialize
=== Example ===
{{{
// serialize an object
_.S({hello: "world!", recurse: {awesome: "true", undef: undefined, notfalse: true}})
//"{hello:'world!',recurse:{awesome:'true',undef:undefined,notfalse:true}}"

// unserialize a string
_.S("{hello:'world!',recurse:{awesome:'true',undef:undefined,notfalse:true}}",true)
//{hello:'world!',recurse:{awesome:'true',undef:undefined,notfalse:true}}
}}}

== Templates: Templates ==
Simple string templating
=== Usage ===
`_.M(string, vars);`
  * string: the string template
  * vars: an object with the variables to replace
=== Example ===
{{{
var template = "hello {name}! I {verb} you! No, not really, I actually {verb2} you.";
var variables = {
  name: "Bob",
  verb: "love",
  verb2: "want to kill"
}

_.M(template, variables);
//hello Bob! I love you! No, not really, I actually want to kill you.
}}}